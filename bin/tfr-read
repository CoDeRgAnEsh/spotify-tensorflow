#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Copyright 2018 Spotify AB.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing,
#  software distributed under the License is distributed on an
#  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
#  KIND, either express or implied.  See the License for the
#  specific language governing permissions and limitations
#  under the License.

import argparse
import os

import tensorflow as tf
from tensorflow.python.lib.io import file_io

from spotify_tensorflow.example_decoders import ExampleWithFeatureSpecDecoder, ExampleDecoder
from spotify_tensorflow.tf_schema_utils import SchemaToFeatureSpec


def get_args():
    parser = argparse.ArgumentParser(description="Output TFRecords as JSON")
    parser.add_argument("-s", "--schema", help="Path to Schema protobuf file. Uses Example if not "
                                               "supplied.")
    parser.add_argument('tf_records_paths',
                        metavar='TF_RECORDS_PATH',
                        nargs='+',
                        help="TFRecords file (or directory containing .tfrecords files)")
    return parser.parse_args()


def list_tf_records(paths, schema):
    for p in paths:
        if file_io.is_directory(p):
            local_schema_path = os.path.join(p, "_schema.pb")
            if file_io.file_exists(local_schema_path):
                _schema = local_schema_path
            else:
                _schema = schema
            for f in file_io.list_directory(p):
                if f.endswith(".tfrecords"):
                    yield os.path.join(p, f), _schema
        else:
            yield p, schema


if __name__ == '__main__':
    cmdline_args = get_args()

    default_schema = None
    if cmdline_args.schema:
        default_schema = cmdline_args.schema
        assert file_io.file_exists(default_schema), "File not found: {}".format(default_schema)

    last_schema = None
    example_decoder = ExampleDecoder()

    for tf_record_file, schema in list_tf_records(cmdline_args.tf_records_paths,
                                                  default_schema):
        assert file_io.file_exists(tf_record_file), "File not found: {}".format(tf_record_file)

        # Load the right example decoder
        if schema != last_schema:
            last_schema = schema
            if schema:
                schema_object = SchemaToFeatureSpec.parse_schema_file(schema)
                feature_spec = SchemaToFeatureSpec.apply(schema_object)
                example_decoder = ExampleWithFeatureSpecDecoder(feature_spec)
            else:
                example_decoder = ExampleDecoder()

        # decode the examples
        for record in tf.python_io.tf_record_iterator(tf_record_file):
            print example_decoder.to_json(record)
